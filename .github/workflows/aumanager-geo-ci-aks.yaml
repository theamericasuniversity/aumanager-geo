name: aumanager-geo-ci-aks

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CLUSTER_NAME: au-manager-cluster
  CLUSTER_RESOURCE_GROUP: CoreResources
  NAMESPACE: au-manager
  SECRET: au-manager-secret
  APP_NAME: au-manager-geo-api

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      #substitute production appsettings entries to appsettings json file
      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: 'aumanager-geo/appsettings.json'
        env:
          ServiceDBConnectionString: ${{ secrets.DB_CONNECTION_STRING }}
          AzureAd.Instance: ${{ secrets.AZUREAD_INSTANCE }}
          AzureAd.Domain: ${{ secrets.AZUREAD_DOMAIN }}
          AzureAd.TenantId: ${{ secrets.AZUREAD_TENANTID }}
          AzureAd.ClientId: ${{ secrets.AZUREAD_CLIENTID }}

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }} 
          password: ${{ secrets.ACR_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          docker build . -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}
          
       # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AKS_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if it doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
          
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ secrets.ACR_LOGIN_SERVER }}
          container-registry-username: ${{ secrets.ACR_USERNAME }}
          container-registry-password: ${{ secrets.ACR_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true
          
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            aumanager-geo-api-deployment.yaml
          images: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
